name: 'Build and Release Theater Actor'
description: 'Builds a Rust-based Theater actor and creates a GitHub release'
inputs:
  actor-name:
    description: 'Name of the actor (auto-detected if not provided)'
    required: false
  rust-toolchain:
    description: 'Rust toolchain version'
    required: false
    default: 'stable'
  wasm-target:
    description: 'WASM target'
    required: false
    default: 'wasm32-unknown-unknown'
  cargo-component-version:
    description: 'cargo-component version'
    required: false
    default: 'latest'

runs:
  using: 'composite'
  steps:
    - name: Auto-detect actor name
      id: actor-info
      shell: bash
      run: |
        ACTOR_NAME="${{ inputs.actor-name }}"
        
        # Auto-detect from Cargo.toml if not provided
        if [ -z "$ACTOR_NAME" ] && [ -f "Cargo.toml" ]; then
          ACTOR_NAME=$(grep '^name = ' Cargo.toml | head -1 | sed 's/name = "\(.*\)"/\1/')
        fi
        
        # Fallback to repository name
        if [ -z "$ACTOR_NAME" ]; then
          ACTOR_NAME=$(basename "${{ github.repository }}")
        fi
        
        echo "ACTOR_NAME=$ACTOR_NAME" >> $GITHUB_OUTPUT
        echo "Detected actor name: $ACTOR_NAME"
        
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ inputs.rust-toolchain }}
        targets: ${{ inputs.wasm-target }}
        
    # Replace manual caching with specialized Rust cache
    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ inputs.wasm-target }}-${{ inputs.rust-toolchain }}
        cache-on-failure: true
        
    # Install cargo-binstall using official GitHub Action
    - name: Install cargo-binstall
      uses: cargo-bins/cargo-binstall@main
      
    # Fast binary install using cargo-binstall
    - name: Install cargo-component (fast binary install)
      shell: bash
      run: |
        if ! command -v cargo-component &> /dev/null; then
          echo "Installing cargo-component via cargo-binstall..."
          cargo binstall cargo-component --no-confirm --force
          
          # Verify installation
          if cargo-component --version &> /dev/null; then
            echo "cargo-component successfully installed via cargo-binstall"
          else
            echo "cargo-binstall failed, falling back to cargo install"
            cargo install cargo-component
          fi
        else
          echo "cargo-component already installed"
        fi
        
    # Optional: Setup sccache for even faster builds
    - name: Setup sccache
      uses: mozilla-actions/sccache-action@v0.0.4
      
    - name: Build WASM component
      shell: bash
      env:
        # Use faster linker if available
        CARGO_TARGET_WASM32_UNKNOWN_UNKNOWN_LINKER: lld
        # Enable sccache if installed
        RUSTC_WRAPPER: sccache
      run: |
        echo "Building WebAssembly component..."
        cargo component build --release --target ${{ inputs.wasm-target }}
        
    - name: Check for initial state in manifest
      id: check-state
      shell: bash
      run: |
        # Check if manifest references initial_state
        if [ -f "manifest.toml" ] && grep -q "init_state" manifest.toml; then
          echo "HAS_INITIAL_STATE=true" >> $GITHUB_OUTPUT
          echo "Manifest includes initial_state reference"
        else
          echo "HAS_INITIAL_STATE=false" >> $GITHUB_OUTPUT
          echo "No initial_state found in manifest"
        fi
        
    - name: Prepare release assets
      shell: bash
      run: |
        echo "Preparing release assets..."
        
        # Auto-detect binary name
        WASM_FILE=$(find target/${{ inputs.wasm-target }}/release/ -name "*.wasm" -not -path "*/deps/*" | head -1)
        if [ -z "$WASM_FILE" ]; then
          BINARY_NAME="${{ steps.actor-info.outputs.ACTOR_NAME }}"
        else
          BINARY_NAME=$(basename "$WASM_FILE" .wasm)
        fi
        
        echo "Found WASM binary: $BINARY_NAME.wasm"
        
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/}
        echo "Release version: $VERSION"
        
        # Prepare core assets
        cp "target/${{ inputs.wasm-target }}/release/$BINARY_NAME.wasm" component.wasm
        echo "Copied component.wasm ($(du -h component.wasm | cut -f1))"
        
        # Update manifest URLs if manifest exists
        if [ -f "manifest.toml" ]; then
          echo "Updating manifest URLs..."
          sed -i "s|component = \".*\"|component = \"https://github.com/${{ github.repository }}/releases/download/$VERSION/component.wasm\"|" manifest.toml
          sed -i "s|version = \".*\"|version = \"$VERSION\"|" manifest.toml
          
          # Update initial_state URL if present
          if [ "${{ steps.check-state.outputs.HAS_INITIAL_STATE }}" = "true" ]; then
            sed -i "s|init_state = \".*\"|init_state = \"https://github.com/${{ github.repository }}/releases/download/$VERSION/init.json\"|" manifest.toml
          fi
        else
          echo "Warning: manifest.toml not found - creating minimal manifest"
          # Create minimal manifest using echo statements to avoid YAML heredoc issues
          echo '[actor]' > manifest.toml
          echo "name = \"${{ steps.actor-info.outputs.ACTOR_NAME }}\"" >> manifest.toml
          echo "version = \"$VERSION\"" >> manifest.toml
          echo "component = \"https://github.com/${{ github.repository }}/releases/download/$VERSION/component.wasm\"" >> manifest.toml
        fi
        
        echo "Release preparation complete!"
